"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/Stripe.js":
/*!***********************!*\
  !*** ./app/Stripe.js ***!
  \***********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\nfunction Stripe() {\n    _s();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        /*\n     *   Stripe WebGl Gradient Animation by Stripe.com\n     *   ScrollObserver functionality to disable animation when not scrolled into view has been disabled and\n     *   commented out for now.\n     */ //Converting colors to proper format\n        function normalizeColor(hexCode) {\n            return [\n                (hexCode >> 16 & 255) / 255,\n                (hexCode >> 8 & 255) / 255,\n                (255 & hexCode) / 255\n            ];\n        }\n        [\n            \"SCREEN\",\n            \"LINEAR_LIGHT\"\n        ].reduce((hexCode, t, n)=>Object.assign(hexCode, {\n                [t]: n\n            }), {});\n        //Essential functionality of WebGl\n        //t = width\n        //n = height\n        class MiniGl {\n            setSize() {\n                let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 640, t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 480;\n                this.width = e, this.height = t, this.canvas.width = e, this.canvas.height = t, this.gl.viewport(0, 0, e, t), this.commonUniforms.resolution.value = [\n                    e,\n                    t\n                ], this.commonUniforms.aspectRatio.value = e / t, this.debug(\"MiniGL.setSize\", {\n                    width: e,\n                    height: t\n                });\n            }\n            //left, right, top, bottom, near, far\n            setOrthographicCamera() {\n                let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : -2e3, s = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 2e3;\n                this.commonUniforms.projectionMatrix.value = [\n                    2 / this.width,\n                    0,\n                    0,\n                    0,\n                    0,\n                    2 / this.height,\n                    0,\n                    0,\n                    0,\n                    0,\n                    2 / (i - s),\n                    0,\n                    e,\n                    t,\n                    n,\n                    1\n                ], this.debug(\"setOrthographicCamera\", this.commonUniforms.projectionMatrix.value);\n            }\n            render() {\n                this.gl.clearColor(0, 0, 0, 0), this.gl.clearDepth(1), this.meshes.forEach((e)=>e.draw());\n            }\n            constructor(canvas, width, height, debug = false){\n                const _miniGl = this, debug_output = -1 !== document.location.search.toLowerCase().indexOf(\"debug=webgl\");\n                _miniGl.canvas = canvas, _miniGl.gl = _miniGl.canvas.getContext(\"webgl\", {\n                    antialias: true\n                }), _miniGl.meshes = [];\n                const context = _miniGl.gl;\n                width && height && this.setSize(width, height), _miniGl.lastDebugMsg, _miniGl.debug = debug && debug_output ? function(e) {\n                    const t = new Date();\n                    t - _miniGl.lastDebugMsg > 1e3 && console.log(\"---\"), console.log(t.toLocaleTimeString() + Array(Math.max(0, 32 - e.length)).join(\" \") + e + \": \", ...Array.from(arguments).slice(1)), _miniGl.lastDebugMsg = t;\n                } : ()=>{}, Object.defineProperties(_miniGl, {\n                    Material: {\n                        enumerable: false,\n                        value: class {\n                            //t = uniform\n                            attachUniforms(name, uniforms) {\n                                //n  = material\n                                const material = this;\n                                void 0 === name ? Object.entries(uniforms).forEach((param)=>{\n                                    let [name, uniform] = param;\n                                    material.attachUniforms(name, uniform);\n                                }) : \"array\" == uniforms.type ? uniforms.value.forEach((uniform, i)=>material.attachUniforms(\"\".concat(name, \"[\").concat(i, \"]\"), uniform)) : \"struct\" == uniforms.type ? Object.entries(uniforms.value).forEach((param)=>{\n                                    let [uniform, i] = param;\n                                    return material.attachUniforms(\"\".concat(name, \".\").concat(uniform), i);\n                                }) : (_miniGl.debug(\"Material.attachUniforms\", {\n                                    name: name,\n                                    uniform: uniforms\n                                }), material.uniformInstances.push({\n                                    uniform: uniforms,\n                                    location: context.getUniformLocation(material.program, name)\n                                }));\n                            }\n                            constructor(vertexShaders, fragments, uniforms = {}){\n                                const material = this;\n                                function getShaderByType(type, source) {\n                                    const shader = context.createShader(type);\n                                    return context.shaderSource(shader, source), context.compileShader(shader), context.getShaderParameter(shader, context.COMPILE_STATUS) || console.error(context.getShaderInfoLog(shader)), _miniGl.debug(\"Material.compileShaderSource\", {\n                                        source: source\n                                    }), shader;\n                                }\n                                function getUniformVariableDeclarations(uniforms, type) {\n                                    return Object.entries(uniforms).map((param)=>{\n                                        let [uniform, value] = param;\n                                        return value.getDeclaration(uniform, type);\n                                    }).join(\"\\n\");\n                                }\n                                material.uniforms = uniforms, material.uniformInstances = [];\n                                const prefix = \"\\n              precision highp float;\\n            \";\n                                material.vertexSource = \"\\n              \".concat(prefix, \"\\n              attribute vec4 position;\\n              attribute vec2 uv;\\n              attribute vec2 uvNorm;\\n              \").concat(getUniformVariableDeclarations(_miniGl.commonUniforms, \"vertex\"), \"\\n              \").concat(getUniformVariableDeclarations(uniforms, \"vertex\"), \"\\n              \").concat(vertexShaders, \"\\n            \"), material.Source = \"\\n              \".concat(prefix, \"\\n              \").concat(getUniformVariableDeclarations(_miniGl.commonUniforms, \"fragment\"), \"\\n              \").concat(getUniformVariableDeclarations(uniforms, \"fragment\"), \"\\n              \").concat(fragments, \"\\n            \"), material.vertexShader = getShaderByType(context.VERTEX_SHADER, material.vertexSource), material.fragmentShader = getShaderByType(context.FRAGMENT_SHADER, material.Source), material.program = context.createProgram(), context.attachShader(material.program, material.vertexShader), context.attachShader(material.program, material.fragmentShader), context.linkProgram(material.program), context.getProgramParameter(material.program, context.LINK_STATUS) || console.error(context.getProgramInfoLog(material.program)), context.useProgram(material.program), material.attachUniforms(void 0, _miniGl.commonUniforms), material.attachUniforms(void 0, material.uniforms);\n                            }\n                        }\n                    },\n                    Uniform: {\n                        enumerable: !1,\n                        value: class {\n                            update(value) {\n                                void 0 !== this.value && context[\"uniform\".concat(this.typeFn)](value, 0 === this.typeFn.indexOf(\"Matrix\") ? this.transpose : this.value, 0 === this.typeFn.indexOf(\"Matrix\") ? this.value : null);\n                            }\n                            //e - name\n                            //t - type\n                            //n - length\n                            getDeclaration(name, type, length) {\n                                const uniform = this;\n                                if (uniform.excludeFrom !== type) {\n                                    var _uniform_value_;\n                                    if (\"array\" === uniform.type) return ((_uniform_value_ = uniform.value[0]) === null || _uniform_value_ === void 0 ? void 0 : _uniform_value_.getDeclaration(name, type, uniform.value.length)) + \"\\nconst int \".concat(name, \"_length = \").concat(uniform.value.length, \";\");\n                                    if (\"struct\" === uniform.type) {\n                                        let name_no_prefix = name.replace(\"u_\", \"\");\n                                        return name_no_prefix = name_no_prefix.charAt(0).toUpperCase() + name_no_prefix.slice(1), \"uniform struct \".concat(name_no_prefix, \" \\n                                  {\\n\") + Object.entries(uniform.value).map((param)=>{\n                                            let [name, uniform] = param;\n                                            return uniform.getDeclaration(name, type).replace(/^uniform/, \"\");\n                                        }).join(\"\") + \"\\n} \".concat(name).concat(length > 0 ? \"[\".concat(length, \"]\") : \"\", \";\");\n                                    }\n                                    return \"uniform \".concat(uniform.type, \" \").concat(name).concat(length > 0 ? \"[\".concat(length, \"]\") : \"\", \";\");\n                                }\n                            }\n                            constructor(e){\n                                this.type = \"float\", Object.assign(this, e);\n                                this.typeFn = ({\n                                    float: \"1f\",\n                                    int: \"1i\",\n                                    vec2: \"2fv\",\n                                    vec3: \"3fv\",\n                                    vec4: \"4fv\",\n                                    mat4: \"Matrix4fv\"\n                                })[this.type] || \"1f\", this.update();\n                            }\n                        }\n                    },\n                    PlaneGeometry: {\n                        enumerable: !1,\n                        value: class {\n                            setTopology() {\n                                let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n                                const n = this;\n                                n.xSegCount = e, n.ySegCount = t, n.vertexCount = (n.xSegCount + 1) * (n.ySegCount + 1), n.quadCount = n.xSegCount * n.ySegCount * 2, n.attributes.uv.values = new Float32Array(2 * n.vertexCount), n.attributes.uvNorm.values = new Float32Array(2 * n.vertexCount), n.attributes.index.values = new Uint16Array(3 * n.quadCount);\n                                for(let e = 0; e <= n.ySegCount; e++)for(let t = 0; t <= n.xSegCount; t++){\n                                    const i = e * (n.xSegCount + 1) + t;\n                                    if (n.attributes.uv.values[2 * i] = t / n.xSegCount, n.attributes.uv.values[2 * i + 1] = 1 - e / n.ySegCount, n.attributes.uvNorm.values[2 * i] = t / n.xSegCount * 2 - 1, n.attributes.uvNorm.values[2 * i + 1] = 1 - e / n.ySegCount * 2, t < n.xSegCount && e < n.ySegCount) {\n                                        const s = e * n.xSegCount + t;\n                                        n.attributes.index.values[6 * s] = i, n.attributes.index.values[6 * s + 1] = i + 1 + n.xSegCount, n.attributes.index.values[6 * s + 2] = i + 1, n.attributes.index.values[6 * s + 3] = i + 1, n.attributes.index.values[6 * s + 4] = i + 1 + n.xSegCount, n.attributes.index.values[6 * s + 5] = i + 2 + n.xSegCount;\n                                    }\n                                }\n                                n.attributes.uv.update(), n.attributes.uvNorm.update(), n.attributes.index.update(), _miniGl.debug(\"Geometry.setTopology\", {\n                                    uv: n.attributes.uv,\n                                    uvNorm: n.attributes.uvNorm,\n                                    index: n.attributes.index\n                                });\n                            }\n                            setSize() {\n                                let width = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, height = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, orientation = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"xz\";\n                                const geometry = this;\n                                geometry.width = width, geometry.height = height, geometry.orientation = orientation, geometry.attributes.position.values && geometry.attributes.position.values.length === 3 * geometry.vertexCount || (geometry.attributes.position.values = new Float32Array(3 * geometry.vertexCount));\n                                const o = width / -2, r = height / -2, segment_width = width / geometry.xSegCount, segment_height = height / geometry.ySegCount;\n                                for(let yIndex = 0; yIndex <= geometry.ySegCount; yIndex++){\n                                    const t = r + yIndex * segment_height;\n                                    for(let xIndex = 0; xIndex <= geometry.xSegCount; xIndex++){\n                                        const r = o + xIndex * segment_width, l = yIndex * (geometry.xSegCount + 1) + xIndex;\n                                        geometry.attributes.position.values[3 * l + \"xyz\".indexOf(orientation[0])] = r, geometry.attributes.position.values[3 * l + \"xyz\".indexOf(orientation[1])] = -t;\n                                    }\n                                }\n                                geometry.attributes.position.update(), _miniGl.debug(\"Geometry.setSize\", {\n                                    position: geometry.attributes.position\n                                });\n                            }\n                            constructor(width, height, n, i, orientation){\n                                context.createBuffer(), this.attributes = {\n                                    position: new _miniGl.Attribute({\n                                        target: context.ARRAY_BUFFER,\n                                        size: 3\n                                    }),\n                                    uv: new _miniGl.Attribute({\n                                        target: context.ARRAY_BUFFER,\n                                        size: 2\n                                    }),\n                                    uvNorm: new _miniGl.Attribute({\n                                        target: context.ARRAY_BUFFER,\n                                        size: 2\n                                    }),\n                                    index: new _miniGl.Attribute({\n                                        target: context.ELEMENT_ARRAY_BUFFER,\n                                        size: 3,\n                                        type: context.UNSIGNED_SHORT\n                                    })\n                                }, this.setTopology(n, i), this.setSize(width, height, orientation);\n                            }\n                        }\n                    },\n                    Mesh: {\n                        enumerable: !1,\n                        value: class {\n                            draw() {\n                                context.useProgram(this.material.program), this.material.uniformInstances.forEach((param)=>{\n                                    let { uniform: e, location: t } = param;\n                                    return e.update(t);\n                                }), this.attributeInstances.forEach((param)=>{\n                                    let { attribute: e, location: t } = param;\n                                    return e.use(t);\n                                }), context.drawElements(this.wireframe ? context.LINES : context.TRIANGLES, this.geometry.attributes.index.values.length, context.UNSIGNED_SHORT, 0);\n                            }\n                            remove() {\n                                _miniGl.meshes = _miniGl.meshes.filter((e)=>e != this);\n                            }\n                            constructor(geometry, material){\n                                const mesh = this;\n                                mesh.geometry = geometry, mesh.material = material, mesh.wireframe = !1, mesh.attributeInstances = [], Object.entries(mesh.geometry.attributes).forEach((param)=>{\n                                    let [e, attribute] = param;\n                                    mesh.attributeInstances.push({\n                                        attribute: attribute,\n                                        location: attribute.attach(e, mesh.material.program)\n                                    });\n                                }), _miniGl.meshes.push(mesh), _miniGl.debug(\"Mesh.constructor\", {\n                                    mesh: mesh\n                                });\n                            }\n                        }\n                    },\n                    Attribute: {\n                        enumerable: !1,\n                        value: class {\n                            update() {\n                                void 0 !== this.values && (context.bindBuffer(this.target, this.buffer), context.bufferData(this.target, this.values, context.STATIC_DRAW));\n                            }\n                            attach(e, t) {\n                                const n = context.getAttribLocation(t, e);\n                                return this.target === context.ARRAY_BUFFER && (context.enableVertexAttribArray(n), context.vertexAttribPointer(n, this.size, this.type, this.normalized, 0, 0)), n;\n                            }\n                            use(e) {\n                                context.bindBuffer(this.target, this.buffer), this.target === context.ARRAY_BUFFER && (context.enableVertexAttribArray(e), context.vertexAttribPointer(e, this.size, this.type, this.normalized, 0, 0));\n                            }\n                            constructor(e){\n                                this.type = context.FLOAT, this.normalized = !1, this.buffer = context.createBuffer(), Object.assign(this, e), this.update();\n                            }\n                        }\n                    }\n                });\n                const a = [\n                    1,\n                    0,\n                    0,\n                    0,\n                    0,\n                    1,\n                    0,\n                    0,\n                    0,\n                    0,\n                    1,\n                    0,\n                    0,\n                    0,\n                    0,\n                    1\n                ];\n                _miniGl.commonUniforms = {\n                    projectionMatrix: new _miniGl.Uniform({\n                        type: \"mat4\",\n                        value: a\n                    }),\n                    modelViewMatrix: new _miniGl.Uniform({\n                        type: \"mat4\",\n                        value: a\n                    }),\n                    resolution: new _miniGl.Uniform({\n                        type: \"vec2\",\n                        value: [\n                            1,\n                            1\n                        ]\n                    }),\n                    aspectRatio: new _miniGl.Uniform({\n                        type: \"float\",\n                        value: 1\n                    })\n                };\n            }\n        }\n        //Sets initial properties\n        function e(object, propertyName, val) {\n            return propertyName in object ? Object.defineProperty(object, propertyName, {\n                value: val,\n                enumerable: !0,\n                configurable: !0,\n                writable: !0\n            }) : object[propertyName] = val, object;\n        }\n        //Gradient object\n        class Gradient {\n            async connect() {\n                this.shaderFiles = {\n                    vertex: \"varying vec3 v_color;\\n\\nvoid main() {\\n  float time = u_time * u_global.noiseSpeed;\\n\\n  vec2 noiseCoord = resolution * uvNorm * u_global.noiseFreq;\\n\\n  vec2 st = 1. - uvNorm.xy;\\n\\n  //\\n  // Tilting the plane\\n  //\\n\\n  // Front-to-back tilt\\n  float tilt = resolution.y / 2.0 * uvNorm.y;\\n\\n  // Left-to-right angle\\n  float incline = resolution.x * uvNorm.x / 2.0 * u_vertDeform.incline;\\n\\n  // Up-down shift to offset incline\\n  float offset = resolution.x / 2.0 * u_vertDeform.incline * mix(u_vertDeform.offsetBottom, u_vertDeform.offsetTop, uv.y);\\n\\n  //\\n  // Vertex noise\\n  //\\n\\n  float noise = snoise(vec3(\\n    noiseCoord.x * u_vertDeform.noiseFreq.x + time * u_vertDeform.noiseFlow,\\n    noiseCoord.y * u_vertDeform.noiseFreq.y,\\n    time * u_vertDeform.noiseSpeed + u_vertDeform.noiseSeed\\n  )) * u_vertDeform.noiseAmp;\\n\\n  // Fade noise to zero at edges\\n  noise *= 1.0 - pow(abs(uvNorm.y), 2.0);\\n\\n  // Clamp to 0\\n  noise = max(0.0, noise);\\n\\n  vec3 pos = vec3(\\n    position.x,\\n    position.y + tilt + incline + noise - offset,\\n    position.z\\n  );\\n\\n  //\\n  // Vertex color, to be passed to fragment shader\\n  //\\n\\n  if (u_active_colors[0] == 1.) {\\n    v_color = u_baseColor;\\n  }\\n\\n  for (int i = 0; i < u_waveLayers_length; i++) {\\n    if (u_active_colors[i + 1] == 1.) {\\n      WaveLayers layer = u_waveLayers[i];\\n\\n      float noise = smoothstep(\\n        layer.noiseFloor,\\n        layer.noiseCeil,\\n        snoise(vec3(\\n          noiseCoord.x * layer.noiseFreq.x + time * layer.noiseFlow,\\n          noiseCoord.y * layer.noiseFreq.y,\\n          time * layer.noiseSpeed + layer.noiseSeed\\n        )) / 2.0 + 0.5\\n      );\\n\\n      v_color = blendNormal(v_color, layer.color, pow(noise, 4.));\\n    }\\n  }\\n\\n  //\\n  // Finish\\n  //\\n\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\\n}\",\n                    noise: \"//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : stegu\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//               https://github.com/stegu/webgl-noise\\n//\\n\\nvec3 mod289(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute(vec4 x) {\\n    return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise(vec3 v)\\n{\\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g;\\n  vec3 i1 = min( g.xyz, l.zxy );\\n  vec3 i2 = max( g.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289(i);\\n  vec4 p = permute( permute( permute(\\n            i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n          + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n          + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1.xy,h.z);\\n  vec3 p3 = vec3(a1.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\\n                                dot(p2,x2), dot(p3,x3) ) );\\n}\",\n                    blend: \"//\\n// https://github.com/jamieowen/glsl-blend\\n//\\n\\n// Normal\\n\\nvec3 blendNormal(vec3 base, vec3 blend) {\\n\treturn blend;\\n}\\n\\nvec3 blendNormal(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendNormal(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Screen\\n\\nfloat blendScreen(float base, float blend) {\\n\treturn 1.0-((1.0-base)*(1.0-blend));\\n}\\n\\nvec3 blendScreen(vec3 base, vec3 blend) {\\n\treturn vec3(blendScreen(base.r,blend.r),blendScreen(base.g,blend.g),blendScreen(base.b,blend.b));\\n}\\n\\nvec3 blendScreen(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendScreen(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Multiply\\n\\nvec3 blendMultiply(vec3 base, vec3 blend) {\\n\treturn base*blend;\\n}\\n\\nvec3 blendMultiply(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendMultiply(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Overlay\\n\\nfloat blendOverlay(float base, float blend) {\\n\treturn base<0.5?(2.0*base*blend):(1.0-2.0*(1.0-base)*(1.0-blend));\\n}\\n\\nvec3 blendOverlay(vec3 base, vec3 blend) {\\n\treturn vec3(blendOverlay(base.r,blend.r),blendOverlay(base.g,blend.g),blendOverlay(base.b,blend.b));\\n}\\n\\nvec3 blendOverlay(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendOverlay(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Hard light\\n\\nvec3 blendHardLight(vec3 base, vec3 blend) {\\n\treturn blendOverlay(blend,base);\\n}\\n\\nvec3 blendHardLight(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendHardLight(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Soft light\\n\\nfloat blendSoftLight(float base, float blend) {\\n\treturn (blend<0.5)?(2.0*base*blend+base*base*(1.0-2.0*blend)):(sqrt(base)*(2.0*blend-1.0)+2.0*base*(1.0-blend));\\n}\\n\\nvec3 blendSoftLight(vec3 base, vec3 blend) {\\n\treturn vec3(blendSoftLight(base.r,blend.r),blendSoftLight(base.g,blend.g),blendSoftLight(base.b,blend.b));\\n}\\n\\nvec3 blendSoftLight(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendSoftLight(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Color dodge\\n\\nfloat blendColorDodge(float base, float blend) {\\n\treturn (blend==1.0)?blend:min(base/(1.0-blend),1.0);\\n}\\n\\nvec3 blendColorDodge(vec3 base, vec3 blend) {\\n\treturn vec3(blendColorDodge(base.r,blend.r),blendColorDodge(base.g,blend.g),blendColorDodge(base.b,blend.b));\\n}\\n\\nvec3 blendColorDodge(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendColorDodge(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Color burn\\n\\nfloat blendColorBurn(float base, float blend) {\\n\treturn (blend==0.0)?blend:max((1.0-((1.0-base)/blend)),0.0);\\n}\\n\\nvec3 blendColorBurn(vec3 base, vec3 blend) {\\n\treturn vec3(blendColorBurn(base.r,blend.r),blendColorBurn(base.g,blend.g),blendColorBurn(base.b,blend.b));\\n}\\n\\nvec3 blendColorBurn(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendColorBurn(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Vivid Light\\n\\nfloat blendVividLight(float base, float blend) {\\n\treturn (blend<0.5)?blendColorBurn(base,(2.0*blend)):blendColorDodge(base,(2.0*(blend-0.5)));\\n}\\n\\nvec3 blendVividLight(vec3 base, vec3 blend) {\\n\treturn vec3(blendVividLight(base.r,blend.r),blendVividLight(base.g,blend.g),blendVividLight(base.b,blend.b));\\n}\\n\\nvec3 blendVividLight(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendVividLight(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Lighten\\n\\nfloat blendLighten(float base, float blend) {\\n\treturn max(blend,base);\\n}\\n\\nvec3 blendLighten(vec3 base, vec3 blend) {\\n\treturn vec3(blendLighten(base.r,blend.r),blendLighten(base.g,blend.g),blendLighten(base.b,blend.b));\\n}\\n\\nvec3 blendLighten(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendLighten(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Linear burn\\n\\nfloat blendLinearBurn(float base, float blend) {\\n\t// Note : Same implementation as BlendSubtractf\\n\treturn max(base+blend-1.0,0.0);\\n}\\n\\nvec3 blendLinearBurn(vec3 base, vec3 blend) {\\n\t// Note : Same implementation as BlendSubtract\\n\treturn max(base+blend-vec3(1.0),vec3(0.0));\\n}\\n\\nvec3 blendLinearBurn(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendLinearBurn(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Linear dodge\\n\\nfloat blendLinearDodge(float base, float blend) {\\n\t// Note : Same implementation as BlendAddf\\n\treturn min(base+blend,1.0);\\n}\\n\\nvec3 blendLinearDodge(vec3 base, vec3 blend) {\\n\t// Note : Same implementation as BlendAdd\\n\treturn min(base+blend,vec3(1.0));\\n}\\n\\nvec3 blendLinearDodge(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendLinearDodge(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Linear light\\n\\nfloat blendLinearLight(float base, float blend) {\\n\treturn blend<0.5?blendLinearBurn(base,(2.0*blend)):blendLinearDodge(base,(2.0*(blend-0.5)));\\n}\\n\\nvec3 blendLinearLight(vec3 base, vec3 blend) {\\n\treturn vec3(blendLinearLight(base.r,blend.r),blendLinearLight(base.g,blend.g),blendLinearLight(base.b,blend.b));\\n}\\n\\nvec3 blendLinearLight(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendLinearLight(base, blend) * opacity + base * (1.0 - opacity));\\n}\",\n                    fragment: \"varying vec3 v_color;\\n\\nvoid main() {\\n  vec3 color = v_color;\\n  if (u_darken_top == 1.0) {\\n    vec2 st = gl_FragCoord.xy/resolution.xy;\\n    color.g -= pow(st.y + sin(-12.0) * st.x, u_shadow_power) * 0.4;\\n  }\\n  gl_FragColor = vec4(color, 1.0);\\n}\"\n                }, this.conf = {\n                    presetName: \"\",\n                    wireframe: false,\n                    density: [\n                        0.06,\n                        0.16\n                    ],\n                    zoom: 1,\n                    rotation: 0,\n                    playing: true\n                }, document.querySelectorAll(\"canvas\").length < 1 ? console.log(\"DID NOT LOAD HERO STRIPE CANVAS\") : (this.minigl = new MiniGl(this.el, null, null, !0), requestAnimationFrame(()=>{\n                    this.el && (this.computedCanvasStyle = getComputedStyle(this.el), this.waitForCssVars());\n                }));\n            /*\n          this.scrollObserver = await s.create(.1, !1),\n          this.scrollObserver.observe(this.el),\n          this.scrollObserver.onSeparate(() => {\n              window.removeEventListener(\"scroll\", this.handleScroll), window.removeEventListener(\"mousedown\", this.handleMouseDown), window.removeEventListener(\"mouseup\", this.handleMouseUp), window.removeEventListener(\"keydown\", this.handleKeyDown), this.isIntersecting = !1, this.conf.playing && this.pause()\n          }), \n          this.scrollObserver.onIntersect(() => {\n              window.addEventListener(\"scroll\", this.handleScroll), window.addEventListener(\"mousedown\", this.handleMouseDown), window.addEventListener(\"mouseup\", this.handleMouseUp), window.addEventListener(\"keydown\", this.handleKeyDown), this.isIntersecting = !0, this.addIsLoadedClass(), this.play()\n          })*/ }\n            disconnect() {\n                this.scrollObserver && (window.removeEventListener(\"scroll\", this.handleScroll), window.removeEventListener(\"mousedown\", this.handleMouseDown), window.removeEventListener(\"mouseup\", this.handleMouseUp), window.removeEventListener(\"keydown\", this.handleKeyDown), this.scrollObserver.disconnect()), window.removeEventListener(\"resize\", this.resize);\n            }\n            initMaterial() {\n                this.uniforms = {\n                    u_time: new this.minigl.Uniform({\n                        value: 0\n                    }),\n                    u_shadow_power: new this.minigl.Uniform({\n                        value: 10\n                    }),\n                    u_darken_top: new this.minigl.Uniform({\n                        value: \"\" === this.el.dataset.jsDarkenTop ? 1 : 0\n                    }),\n                    u_active_colors: new this.minigl.Uniform({\n                        value: this.activeColors,\n                        type: \"vec4\"\n                    }),\n                    u_global: new this.minigl.Uniform({\n                        value: {\n                            noiseFreq: new this.minigl.Uniform({\n                                value: [\n                                    this.freqX,\n                                    this.freqY\n                                ],\n                                type: \"vec2\"\n                            }),\n                            noiseSpeed: new this.minigl.Uniform({\n                                value: 5e-6\n                            })\n                        },\n                        type: \"struct\"\n                    }),\n                    u_vertDeform: new this.minigl.Uniform({\n                        value: {\n                            incline: new this.minigl.Uniform({\n                                value: Math.sin(this.angle) / Math.cos(this.angle)\n                            }),\n                            offsetTop: new this.minigl.Uniform({\n                                value: -0.5\n                            }),\n                            offsetBottom: new this.minigl.Uniform({\n                                value: -0.5\n                            }),\n                            noiseFreq: new this.minigl.Uniform({\n                                value: [\n                                    3,\n                                    4\n                                ],\n                                type: \"vec2\"\n                            }),\n                            noiseAmp: new this.minigl.Uniform({\n                                value: this.amp\n                            }),\n                            noiseSpeed: new this.minigl.Uniform({\n                                value: 10\n                            }),\n                            noiseFlow: new this.minigl.Uniform({\n                                value: 3\n                            }),\n                            noiseSeed: new this.minigl.Uniform({\n                                value: this.seed\n                            })\n                        },\n                        type: \"struct\",\n                        excludeFrom: \"fragment\"\n                    }),\n                    u_baseColor: new this.minigl.Uniform({\n                        value: this.sectionColors[0],\n                        type: \"vec3\",\n                        excludeFrom: \"fragment\"\n                    }),\n                    u_waveLayers: new this.minigl.Uniform({\n                        value: [],\n                        excludeFrom: \"fragment\",\n                        type: \"array\"\n                    })\n                };\n                for(let e = 1; e < this.sectionColors.length; e += 1)this.uniforms.u_waveLayers.value.push(new this.minigl.Uniform({\n                    value: {\n                        color: new this.minigl.Uniform({\n                            value: this.sectionColors[e],\n                            type: \"vec3\"\n                        }),\n                        noiseFreq: new this.minigl.Uniform({\n                            value: [\n                                2 + e / this.sectionColors.length,\n                                3 + e / this.sectionColors.length\n                            ],\n                            type: \"vec2\"\n                        }),\n                        noiseSpeed: new this.minigl.Uniform({\n                            value: 11 + 0.3 * e\n                        }),\n                        noiseFlow: new this.minigl.Uniform({\n                            value: 6.5 + 0.3 * e\n                        }),\n                        noiseSeed: new this.minigl.Uniform({\n                            value: this.seed + 10 * e\n                        }),\n                        noiseFloor: new this.minigl.Uniform({\n                            value: 0.1\n                        }),\n                        noiseCeil: new this.minigl.Uniform({\n                            value: 0.63 + 0.07 * e\n                        })\n                    },\n                    type: \"struct\"\n                }));\n                return this.vertexShader = [\n                    this.shaderFiles.noise,\n                    this.shaderFiles.blend,\n                    this.shaderFiles.vertex\n                ].join(\"\\n\\n\"), new this.minigl.Material(this.vertexShader, this.shaderFiles.fragment, this.uniforms);\n            }\n            initMesh() {\n                this.material = this.initMaterial(), this.geometry = new this.minigl.PlaneGeometry(), this.mesh = new this.minigl.Mesh(this.geometry, this.material);\n            }\n            shouldSkipFrame(e) {\n                return !!window.document.hidden || !this.conf.playing || parseInt(e, 10) % 2 == 0 || void 0;\n            }\n            updateFrequency(e) {\n                this.freqX += e, this.freqY += e;\n            }\n            toggleColor(index) {\n                this.activeColors[index] = 0 === this.activeColors[index] ? 1 : 0;\n            }\n            showGradientLegend() {\n                this.width > this.minWidth && (this.isGradientLegendVisible = !0, document.body.classList.add(\"isGradientLegendVisible\"));\n            }\n            hideGradientLegend() {\n                this.isGradientLegendVisible = !1, document.body.classList.remove(\"isGradientLegendVisible\");\n            }\n            init() {\n                this.initGradientColors(), this.initMesh(), this.resize(), requestAnimationFrame(this.animate), window.addEventListener(\"resize\", this.resize);\n            }\n            /*\n       * Waiting for the css variables to become available, usually on page load before we can continue.\n       * Using default colors assigned below if no variables have been found after maxCssVarRetries\n       */ waitForCssVars() {\n                if (this.computedCanvasStyle && -1 !== this.computedCanvasStyle.getPropertyValue(\"--gradient-color-1\").indexOf(\"#\")) this.init(), this.addIsLoadedClass();\n                else {\n                    if (this.cssVarRetries += 1, this.cssVarRetries > this.maxCssVarRetries) {\n                        return this.sectionColors = [\n                            16711680,\n                            16711680,\n                            16711935,\n                            65280,\n                            255\n                        ], void this.init();\n                    }\n                    requestAnimationFrame(()=>this.waitForCssVars());\n                }\n            }\n            /*\n       * Initializes the four section colors by retrieving them from css variables.\n       */ initGradientColors() {\n                this.sectionColors = [\n                    \"--gradient-color-1\",\n                    \"--gradient-color-2\",\n                    \"--gradient-color-3\",\n                    \"--gradient-color-4\"\n                ].map((cssPropertyName)=>{\n                    let hex = this.computedCanvasStyle.getPropertyValue(cssPropertyName).trim();\n                    //Check if shorthand hex value was used and double the length so the conversion in normalizeColor will work.\n                    if (4 === hex.length) {\n                        const hexTemp = hex.substr(1).split(\"\").map((hexTemp)=>hexTemp + hexTemp).join(\"\");\n                        hex = \"#\".concat(hexTemp);\n                    }\n                    return hex && \"0x\".concat(hex.substr(1));\n                }).filter(Boolean).map(normalizeColor);\n            }\n            constructor(...t){\n                e(this, \"el\", void 0), e(this, \"cssVarRetries\", 0), e(this, \"maxCssVarRetries\", 200), e(this, \"angle\", 0), e(this, \"isLoadedClass\", !1), e(this, \"isScrolling\", !1), /*e(this, \"isStatic\", o.disableAmbientAnimations()),*/ e(this, \"scrollingTimeout\", void 0), e(this, \"scrollingRefreshDelay\", 200), e(this, \"isIntersecting\", !1), e(this, \"shaderFiles\", void 0), e(this, \"vertexShader\", void 0), e(this, \"sectionColors\", void 0), e(this, \"computedCanvasStyle\", void 0), e(this, \"conf\", void 0), e(this, \"uniforms\", void 0), e(this, \"t\", 1253106), e(this, \"last\", 0), e(this, \"width\", void 0), e(this, \"minWidth\", 1111), e(this, \"height\", 600), e(this, \"xSegCount\", void 0), e(this, \"ySegCount\", void 0), e(this, \"mesh\", void 0), e(this, \"material\", void 0), e(this, \"geometry\", void 0), e(this, \"minigl\", void 0), e(this, \"scrollObserver\", void 0), e(this, \"amp\", 320), e(this, \"seed\", 5), e(this, \"freqX\", 14e-5), e(this, \"freqY\", 29e-5), e(this, \"freqDelta\", 1e-5), e(this, \"activeColors\", [\n                    1,\n                    1,\n                    1,\n                    1\n                ]), e(this, \"isMetaKey\", !1), e(this, \"isGradientLegendVisible\", !1), e(this, \"isMouseDown\", !1), e(this, \"handleScroll\", ()=>{\n                    clearTimeout(this.scrollingTimeout), this.scrollingTimeout = setTimeout(this.handleScrollEnd, this.scrollingRefreshDelay), this.isGradientLegendVisible && this.hideGradientLegend(), this.conf.playing && (this.isScrolling = !0, this.pause());\n                }), e(this, \"handleScrollEnd\", ()=>{\n                    this.isScrolling = !1, this.isIntersecting && this.play();\n                }), e(this, \"resize\", ()=>{\n                    this.width = window.innerWidth, this.minigl.setSize(this.width, this.height), this.minigl.setOrthographicCamera(), this.xSegCount = Math.ceil(this.width * this.conf.density[0]), this.ySegCount = Math.ceil(this.height * this.conf.density[1]), this.mesh.geometry.setTopology(this.xSegCount, this.ySegCount), this.mesh.geometry.setSize(this.width, this.height), this.mesh.material.uniforms.u_shadow_power.value = this.width < 600 ? 5 : 6;\n                }), e(this, \"handleMouseDown\", (e)=>{\n                    this.isGradientLegendVisible && (this.isMetaKey = e.metaKey, this.isMouseDown = !0, !1 === this.conf.playing && requestAnimationFrame(this.animate));\n                }), e(this, \"handleMouseUp\", ()=>{\n                    this.isMouseDown = !1;\n                }), e(this, \"animate\", (e)=>{\n                    if (!this.shouldSkipFrame(e) || this.isMouseDown) {\n                        if (this.t += Math.min(e - this.last, 1e3 / 15), this.last = e, this.isMouseDown) {\n                            let e = 160;\n                            this.isMetaKey && (e = -160), this.t += e;\n                        }\n                        this.mesh.material.uniforms.u_time.value = this.t, this.minigl.render();\n                    }\n                    if (0 !== this.last && this.isStatic) return this.minigl.render(), void this.disconnect();\n                    /*this.isIntersecting && */ (this.conf.playing || this.isMouseDown) && requestAnimationFrame(this.animate);\n                }), e(this, \"addIsLoadedClass\", ()=>{\n                    /*this.isIntersecting && */ !this.isLoadedClass && (this.isLoadedClass = !0, this.el.classList.add(\"isLoaded\"), setTimeout(()=>{\n                        this.el.parentElement.classList.add(\"isLoaded\");\n                    }, 3e3));\n                }), e(this, \"pause\", ()=>{\n                    this.conf.playing = false;\n                }), e(this, \"play\", ()=>{\n                    requestAnimationFrame(this.animate), this.conf.playing = true;\n                }), e(this, \"initGradient\", (selector)=>{\n                    this.el = document.querySelector(selector);\n                    this.connect();\n                    return this;\n                });\n            }\n        }\n        /*\n     *Finally initializing the Gradient class, assigning a canvas to it and calling Gradient.connect() which initializes everything,\n     * Use Gradient.pause() and Gradient.play() for controls.\n     *\n     * Here are some default property values you can change anytime:\n     * Amplitude:    Gradient.amp = 0\n     * Colors:       Gradient.sectionColors (if you change colors, use normalizeColor(#hexValue)) before you assign it.\n     *\n     *\n     * Useful functions\n     * Gradient.toggleColor(index)\n     * Gradient.updateFrequency(freq)\n     */ var gradient = new Gradient();\n        gradient.initGradient(\"#gradient-canvas\");\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"canvas\", {\n            id: \"gradient-canvas\",\n            //   style=\"width:100vw;height:100vh\"\n            className: \"w-full h-screen\"\n        }, void 0, false, {\n            fileName: \"/Users/admin/repos/SURVISION-landing-page/app/Stripe.js\",\n            lineNumber: 906,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/admin/repos/SURVISION-landing-page/app/Stripe.js\",\n        lineNumber: 905,\n        columnNumber: 5\n    }, this);\n}\n_s(Stripe, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Stripe;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Stripe);\nvar _c;\n$RefreshReg$(_c, \"Stripe\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/Stripe.js\n"));

/***/ })

});